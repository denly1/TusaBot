#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ persistence —Ñ–∞–π–ª–∞ –≤ PostgreSQL –ë–î
"""
import asyncio
import pickle
import os
from pathlib import Path
from dotenv import load_dotenv
from db import create_pool, upsert_user, DB_HOST, DB_PORT, DB_NAME, DB_USER

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

async def migrate_users():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î...")
    print(f"   DB_HOST: {DB_HOST}")
    print(f"   DB_PORT: {DB_PORT}")
    print(f"   DB_NAME: {DB_NAME}")
    print(f"   DB_USER: {DB_USER}")
    
    if DB_USER == "postgres":
        print("‚ùå –û–®–ò–ë–ö–ê: DB_USER=postgres (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å tusabot_user)")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env!")
        return
    
    # –ü—É—Ç—å –∫ persistence —Ñ–∞–π–ª—É
    persistence_file = Path("/opt/tusabot/data/bot_data.pkl")
    
    if not persistence_file.exists():
        print(f"‚ùå –§–∞–π–ª {persistence_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ persistence
    print("\nüìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ persistence —Ñ–∞–π–ª–∞...")
    with open(persistence_file, "rb") as f:
        data = pickle.load(f)
    
    user_data = data.get("user_data", {})
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ persistence")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    print("\nüîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
    try:
        pool = await create_pool()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    migrated = 0
    skipped = 0
    
    for tg_id, user_info in user_data.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not user_info.get("registered"):
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {tg_id} - –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
                skipped += 1
                continue
            
            name = user_info.get("name")
            gender = user_info.get("gender")
            age = user_info.get("age")
            vk_id = user_info.get("vk_id")
            username = None  # Username –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ persistence, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º /start
            
            if not name:
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {tg_id} - –Ω–µ—Ç –∏–º–µ–Ω–∏")
                skipped += 1
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await upsert_user(
                pool=pool,
                tg_id=tg_id,
                name=name,
                gender=gender,
                age=age,
                vk_id=vk_id,
                username=username
            )
            
            migrated += 1
            print(f"‚úÖ {migrated}. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω: {name} (ID: {tg_id})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ {tg_id}: {e}")
            skipped += 1
    
    await pool.close()
    
    print("\n" + "="*50)
    print(f"üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"üìä –í—Å–µ–≥–æ: {len(user_data)}")
    print("="*50)

if __name__ == "__main__":
    asyncio.run(migrate_users())
