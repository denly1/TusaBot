import os
import logging
import asyncio
from datetime import datetime, timedelta, time, timezone
from pathlib import Path
import pytz
from typing import Set, Optional
import re
import httpx

# Simple validators
def is_valid_url(url: str) -> bool:
    if not url or not isinstance(url, str):
        return False
    url = url.strip()
    return bool(re.match(r"^(https?://)[\w\-]+(\.[\w\-]+)+(:\d+)?(/[\w\-._~:/?#\[\]@!$&'()*+,;=%]*)?$", url))

def is_valid_caption(c: str) -> bool:
    # Telegram photo caption limit is 1024 chars for older APIs; use 1024 as a safe cap
    return c is not None and len(c) <= 1024

from dotenv import load_dotenv, dotenv_values, find_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    BotCommand,
)
from telegram.constants import ChatMemberStatus
from telegram.error import Forbidden
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    PicklePersistence,
    ContextTypes,
    TypeHandler,
    filters,
)
from telegram.request import HTTPXRequest
from db import create_pool, init_schema, upsert_user, set_vk_id, get_user, get_user_by_username, get_all_user_ids, load_user_vk_data, get_user_stats, export_users_to_excel

# ----------------------
# Logging
# ----------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("TusaBot")

# ----------------------
# Env config
# ----------------------
_DOTENV_PATH = find_dotenv(usecwd=True) or os.path.join(os.path.dirname(__file__), ".env")
load_dotenv(dotenv_path=_DOTENV_PATH, override=True)
_ENV_FALLBACK = dotenv_values(dotenv_path=_DOTENV_PATH)  # read .env directly as fallback


def _clean_env(v: str) -> str:
    v = (v or "").strip()
    # remove surrounding single or double quotes if present
    if (v.startswith('"') and v.endswith('"')) or (v.startswith("'") and v.endswith("'")):
        v = v[1:-1].strip()
    return v


def _get_env(key: str, default: str = "") -> str:
    v = os.getenv(key)
    if v is None or v == "":
        v = _ENV_FALLBACK.get(key, default)
    return _clean_env(v)


BOT_TOKEN = _get_env("BOT_TOKEN", "")
ADMIN_USER_ID_STR = _get_env("ADMIN_USER_ID", "")
ADMIN_USER_ID = int(ADMIN_USER_ID_STR) if ADMIN_USER_ID_STR.isdigit() else 0
ADMIN_USER_ID_2_STR = _get_env("ADMIN_USER_ID_2", "")
ADMIN_USER_ID_2 = int(ADMIN_USER_ID_2_STR) if ADMIN_USER_ID_2_STR.isdigit() else 0
ADMIN_USER_ID_3_STR = _get_env("ADMIN_USER_ID_3", "")
ADMIN_USER_ID_3 = int(ADMIN_USER_ID_3_STR) if ADMIN_USER_ID_3_STR.isdigit() else 0
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "@largentmsk")
CHANNEL_USERNAME_2 = os.getenv("CHANNEL_USERNAME_2", "@idnrecords")

def _normalize_channel(value: str):
    v = (value or "").strip()
    # numeric chat id like -1001234567890
    if v.startswith("-100") and v[4:].isdigit():
        return int(v)
    # strip t.me prefixes
    for prefix in ("https://t.me/", "http://t.me/", "t.me/"):
        if v.lower().startswith(prefix):
            v = v[len(prefix):]
            break
    if not v.startswith("@"):
        v = f"@{v}"
    return v

CHANNEL_ID = _normalize_channel(CHANNEL_USERNAME)
CHANNEL_ID_2 = _normalize_channel(CHANNEL_USERNAME_2)
WEEKLY_DAY = int(_get_env("WEEKLY_DAY", "4"))  # 0=Mon..6=Sun
WEEKLY_HOUR_LOCAL = int(_get_env("WEEKLY_HOUR", "12"))
WEEKLY_MINUTE = int(_get_env("WEEKLY_MINUTE", "0"))
# VK integration
VK_TOKEN = _get_env("VK_TOKEN", "")
VK_ENABLED = bool(VK_TOKEN)
def _normalize_vk_group_domain(v: str) -> str:
    v = v.strip()
    for prefix in ("https://vk.com/", "http://vk.com/", "vk.com/"):
        if v.lower().startswith(prefix):
            v = v[len(prefix):]
            break
    return v.strip("/") or "largent.tusa"
VK_GROUP_DOMAIN = os.getenv("VK_GROUP_DOMAIN", "largent.tusa")
# Proxy settings
PROXY_URL = _get_env("PROXY_URL", "")
# Convert MSK (UTC+3) local hour to UTC for job queue
WEEKLY_HOUR_UTC = (WEEKLY_HOUR_LOCAL - 3) % 24

logger.info("Loaded .env from: %s", _DOTENV_PATH)

REENGAGE_TEXT = (
    "–ú—ã –æ—á–µ–Ω—å —Å–∫—É—á–∞–µ–º –±–µ–∑ —Ç–µ–±—è ü•π\n"
    "–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è, –Ω–æ–≤—ã–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ ü•≥\n"
    "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ, –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Ç—ã—Ü —Ç—ã—Ü —Ç—ã—Ü –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µ üíÉüï∫üèª"
)

DATA_DIR = Path(__file__).parent / "data"
PERSISTENCE_FILE = DATA_DIR / "bot_data.pkl"

# ----------------------
# Helpers
# ----------------------

def ensure_data_dir() -> None:
    DATA_DIR.mkdir(exist_ok=True)


def week_key_for_date(dt: datetime) -> str:
    iso_year, iso_week, _ = dt.isocalendar()
    return f"{iso_year}-W{iso_week:02d}"


def previous_week_key(now: datetime) -> str:
    last_week_date = now - timedelta(days=7)
    return week_key_for_date(last_week_date)


async def is_user_subscribed(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> tuple[bool, bool]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±–∞ Telegram –∫–∞–Ω–∞–ª–∞
    
    Returns:
        tuple[bool, bool]: (–ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª)
    """
    channel1_ok = False
    channel2_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        channel1_ok = member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.warning("Failed to check TG subscription for user %s on %s: %s", user_id, CHANNEL_USERNAME, e)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME_2, user_id)
        channel2_ok = member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.warning("Failed to check TG subscription for user %s on %s: %s", user_id, CHANNEL_USERNAME_2, e)
    
    return channel1_ok, channel2_ok


async def get_bot_channel_status(context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        bot_member = await context.bot.get_chat_member(CHANNEL_USERNAME, context.bot.id)
        if bot_member.status == "administrator":
            return f"–ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ {CHANNEL_USERNAME} ‚úÖ"
        else:
            return f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {CHANNEL_USERNAME}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
    except Exception as e:
        logger.warning("Failed to get bot status in channel %s: %s", CHANNEL_USERNAME, e)
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ {CHANNEL_USERNAME}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."


def get_known_users(context: ContextTypes.DEFAULT_TYPE) -> Set[int]:
    bd = context.bot_data
    if "known_users" not in bd:
        bd["known_users"] = set()
    return bd["known_users"]


def get_db_pool(context: ContextTypes.DEFAULT_TYPE):
    try:
        return context.application.bot_data.get("db_pool")
    except Exception:
        return None


async def load_user_data_from_db(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤ context.user_data"""
    pool = get_db_pool(context)
    if not pool:
        logger.warning("No DB pool available for user %s", user_id)
        return
    
    try:
        user_in_db = await get_user(pool, user_id)
        logger.info("DB query result for user %s: %s", user_id, user_in_db)
        
        if user_in_db:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data["name"] = user_in_db.get("name")
            context.user_data["gender"] = user_in_db.get("gender")
            context.user_data["age"] = user_in_db.get("age")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º VK ID –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_in_db.get("vk_id"):
                context.user_data["vk_id"] = user_in_db.get("vk_id")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –Ω—É–∂–Ω—ã –º–∏–Ω–∏–º—É–º –∏–º—è, –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç
            has_required_data = (
                user_in_db.get("name") and 
                user_in_db.get("gender") and 
                user_in_db.get("age") is not None
            )
            
            if has_required_data:
                context.user_data["registered"] = True
                logger.info("User %s fully registered - loaded from DB: name=%s, gender=%s, age=%s", 
                           user_id, user_in_db.get("name"), user_in_db.get("gender"), user_in_db.get("age"))
            else:
                context.user_data["registered"] = False
                logger.info("User %s in DB but incomplete: name=%s, gender=%s, age=%s", 
                           user_id, user_in_db.get("name"), user_in_db.get("gender"), user_in_db.get("age"))
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            context.user_data["registered"] = False
            context.user_data.pop("name", None)
            context.user_data.pop("gender", None)
            context.user_data.pop("age", None)
            context.user_data.pop("vk_id", None)
            logger.info("User %s not found in DB - reset registration", user_id)
    except Exception as e:
        logger.warning("Failed to load user data from DB for user %s: %s", user_id, e)




def get_admins(context: ContextTypes.DEFAULT_TYPE) -> Set[int]:
    bd = context.bot_data
    if "admins" not in bd:
        bd["admins"] = set()
    
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã—Ö)
    if ADMIN_USER_ID:
        bd["admins"].add(ADMIN_USER_ID)
    if ADMIN_USER_ID_2:
        bd["admins"].add(ADMIN_USER_ID_2)
    if ADMIN_USER_ID_3:
        bd["admins"].add(ADMIN_USER_ID_3)
    
    return bd["admins"]


# ----------------------
# VK helpers
# ----------------------

VK_PROFILE_RE = re.compile(r"(?:https?://)?(?:www\.)?vk\.com/(id\d+|[A-Za-z0-9_\.]+)", re.IGNORECASE)


def extract_vk_id(text: str) -> Optional[str]:
    if not text:
        return None
    text = text.strip()
    m = VK_PROFILE_RE.search(text)
    if m:
        return m.group(1)
    # if numeric id
    if text.isdigit():
        return f"id{text}"
    return None


async def vk_is_member(vk_user: str) -> Optional[bool]:
    if not VK_TOKEN:
        return None  # cannot verify
    # groups.isMember accepts group_id (domain) and user_id
    params = {
        "group_id": VK_GROUP_DOMAIN,
        "user_id": vk_user,
        "access_token": VK_TOKEN,
        "v": "5.131",
    }
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get("https://api.vk.com/method/groups.isMember", params=params)
            data = r.json()
            if "error" in data:
                logger.warning("VK API error: %s", data["error"])
                return None
            resp = data.get("response")
            if isinstance(resp, dict):
                return bool(resp.get("member", 0))
            return bool(resp)
    except Exception as e:
        logger.warning("VK check failed: %s", e)
        return None


async def is_user_subscribed_vk(vk_user_id: str) -> Optional[bool]:
    """–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ VK –≥—Ä—É–ø–ø—É.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - True/False ‚Äî –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–∞—Å—å
      - None ‚Äî –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (–æ—à–∏–±–∫–∞ VK API/—Å–µ—Ç—å)
    """
    if not VK_ENABLED or not VK_TOKEN:
        return None

    try:
        import aiohttp

        # 1) –ü–æ–ª—É—á–∞–µ–º numeric group_id –ø–æ –¥–æ–º–µ–Ω—É
        async with aiohttp.ClientSession() as session:
            group_url = (
                "https://api.vk.com/method/groups.getById"
                f"?group_id={VK_GROUP_DOMAIN}&access_token={VK_TOKEN}&v=5.131"
            )
            async with session.get(group_url) as resp:
                group_data = await resp.json()
                if 'error' in group_data:
                    logger.warning("VK API error getting group info: %s", group_data['error'])
                    return None
                group_id = group_data['response'][0]['id']

            # 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º user_id: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 'id123', '123', 'durov'
            raw = (vk_user_id or '').strip()
            if raw.lower().startswith('id') and raw[2:].isdigit():
                user_id_numeric = raw[2:]
            elif raw.isdigit():
                user_id_numeric = raw
            else:
                # resolve screen name -> object_id
                resolve_url = (
                    "https://api.vk.com/method/utils.resolveScreenName"
                    f"?screen_name={raw}&access_token={VK_TOKEN}&v=5.131"
                )
                async with session.get(resolve_url) as r2:
                    rj = await r2.json()
                    if 'error' in rj or not rj.get('response'):
                        logger.warning("VK resolveScreenName failed for %s: %s", raw, rj.get('error'))
                        return None
                    resp = rj['response']
                    if resp.get('type') != 'user':
                        logger.warning("Resolved name is not a user: %s", resp)
                        return None
                    user_id_numeric = str(resp.get('object_id'))

            # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ
            check_url = (
                "https://api.vk.com/method/groups.isMember"
                f"?group_id={group_id}&user_id={user_id_numeric}&access_token={VK_TOKEN}&v=5.131"
            )
            async with session.get(check_url) as resp:
                data = await resp.json()
                if 'error' in data:
                    logger.warning("VK API error checking membership: %s", data['error'])
                    return None
                # –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º 1/0 –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º {member: 1}
                resp_val = data.get('response')
                if isinstance(resp_val, dict):
                    return bool(resp_val.get('member', 0))
                return bool(resp_val)

    except Exception as e:
        logger.warning("Failed to check VK subscription for %s: %s", vk_user_id, e)
        return None


async def broadcast_to_vk(poster_data: dict) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ñ–∏—à—É –≤ VK –≥—Ä—É–ø–ø—É largent.tusa"""
    if not VK_ENABLED or not VK_TOKEN:
        logger.info("VK broadcast disabled - no token")
        return False
    
    try:
        import aiohttp
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ñ–∏—à–∏
        caption = poster_data.get('caption', '')
        ticket_url = poster_data.get('ticket_url', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = caption
        if ticket_url:
            post_text += f"\n\nüé´ –ë–∏–ª–µ—Ç—ã: {ticket_url}"
        
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
            group_url = f"https://api.vk.com/method/groups.getById?group_id={VK_GROUP_DOMAIN}&access_token={VK_TOKEN}&v=5.131"
            async with session.get(group_url) as resp:
                group_data = await resp.json()
                if 'error' in group_data:
                    logger.error("VK API error getting group info: %s", group_data['error'])
                    return False
                
                group_id = group_data['response'][0]['id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É –≥—Ä—É–ø–ø—ã
            post_url = f"https://api.vk.com/method/wall.post"
            post_data = {
                'owner_id': f'-{group_id}',
                'message': post_text,
                'from_group': 1,
                'access_token': VK_TOKEN,
                'v': '5.131'
            }
            
            async with session.post(post_url, data=post_data) as resp:
                result = await resp.json()
                if 'error' in result:
                    logger.error("VK API error posting: %s", result['error'])
                    return False
                
                logger.info("Successfully posted to VK group: post_id=%s", result['response']['post_id'])
                return True
                
    except Exception as e:
        logger.error("Failed to broadcast to VK: %s", e)
        return False


# ----------------------
# Handlers
# ----------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user:
        return
    
    get_known_users(context).add(user.id)
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    pool = get_db_pool(context)
    if pool:
        try:
            await upsert_user(pool, tg_id=user.id, username=user.username)
        except Exception as e:
            logger.warning("DB upsert on /start failed: %s", e)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    await load_user_data_from_db(context, user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
    user_data = context.user_data
    is_registered = (
        user_data.get("registered") == True and 
        user_data.get("name") and 
        user_data.get("gender") and 
        user_data.get("age") is not None
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    has_partial_data = user_data.get("name") or user_data.get("gender") or user_data.get("age") is not None
    
    logger.info("Start command for user %s: registered=%s, name=%s, gender=%s, age=%s", 
               user.id, user_data.get("registered"), user_data.get("name"), 
               user_data.get("gender"), user_data.get("age"))
    
    if is_registered:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
        user_data.pop("registration_step", None)
        user_data.pop("awaiting_vk", None)
        user_data.pop("awaiting_username_check", None)
        
        kb = [[InlineKeyboardButton("üéâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await update.effective_chat.send_message(
            "üéâ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É –Ω–∞—Å –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∞—Ö!\n\n"
            f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data.get('gender') == 'male' else '–ñ–µ–Ω—Å–∫–∏–π' if user_data.get('gender') == 'female' else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
            f"‚Ä¢ VK –ø—Ä–æ—Ñ–∏–ª—å: {'–ü—Ä–∏–≤—è–∑–∞–Ω' if user_data.get('vk_id') else '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! ü•≥",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
    if has_partial_data and not is_registered:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
        if not user_data.get("name"):
            user_data["registration_step"] = "name"
            await update.effective_chat.send_message(
                "üëã –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)"
            )
        elif not user_data.get("gender"):
            user_data["registration_step"] = "gender"
            kb = [
                [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
            ]
            await update.effective_chat.send_message(
                f"–û—Ç–ª–∏—á–Ω–æ, {user_data.get('name')}! üòä\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=InlineKeyboardMarkup(kb)
            )
        elif user_data.get("age") is None:
            user_data["registration_step"] = "age"
            await update.effective_chat.send_message(
                "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! üéØ\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
            )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –Ω–∞—á–∞–ª–∞
    user_data["registration_step"] = "name"
    logger.info("Starting registration for user %s", user.id)
    await update.effective_chat.send_message(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à–∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∏!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)"
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    if not user:
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ
    get_known_users(context).add(user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    await load_user_data_from_db(context, user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
    user_data = context.user_data
    is_registered = (
        user_data.get("registered") == True and 
        user_data.get("name") and 
        user_data.get("gender") and 
        user_data.get("age") is not None
    )
    
    logger.info("Menu command for user %s: registered=%s, name=%s, gender=%s, age=%s", 
               user.id, user_data.get("registered"), user_data.get("name"), 
               user_data.get("gender"), user_data.get("age"))
    
    if not is_registered:
        logger.info("User %s not registered - showing registration message", user.id)
        await update.effective_chat.send_message(
            "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç–µ–∫—É—â–µ–π –∞—Ñ–∏—à–µ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    user = update.effective_user
    if not user:
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–≤ —Ç–æ–º —á–∏—Å–ª–µ VK ID)
    await load_user_data_from_db(context, user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ñ–∏—à–∏
    all_posters = context.bot_data.get("all_posters", [])
    current_poster = context.bot_data.get("poster")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –∞—Ñ–∏—à–∞, –Ω–æ –µ—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –∞—Ñ–∏—à, –¥–æ–±–∞–≤–ª—è–µ–º
    if current_poster and current_poster not in all_posters:
        all_posters.append(current_poster)
        context.bot_data["all_posters"] = all_posters
    
    if not all_posters:
        # –ù–µ—Ç –∞—Ñ–∏—à - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        kb = []
        if user.id in get_admins(context):
            kb.append([InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="open_admin")])
        
        await update.effective_chat.send_message(
            "üé≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ñ–∏—à\n\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
            reply_markup=InlineKeyboardMarkup(kb) if kb else None
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∞—Ñ–∏—à–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ—Å–ª–µ–¥–Ω—è—è)
    if "current_poster_index" not in context.user_data and all_posters:
        context.user_data["current_poster_index"] = len(all_posters) - 1
    current_poster_index = context.user_data.get("current_poster_index", 0)
    if current_poster_index >= len(all_posters):
        current_poster_index = len(all_posters) - 1
        context.user_data["current_poster_index"] = current_poster_index
    elif current_poster_index < 0:
        current_poster_index = 0
        context.user_data["current_poster_index"] = current_poster_index
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞—Ñ–∏—à—É
    poster = all_posters[current_poster_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
    nav_buttons = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞—Ñ–∏—à–∞–º (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π)
    if len(all_posters) > 1:
        nav_row = []
        if current_poster_index > 0:
            nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="poster_prev"))
        if current_poster_index < len(all_posters) - 1:
            nav_row.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="poster_next"))
        if nav_row:
            nav_buttons.append(nav_row)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    action_buttons = []
    
    # 1. –ö–Ω–æ–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞)
    if poster.get("ticket_url"):
        action_buttons.append([InlineKeyboardButton("üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=poster["ticket_url"])])
    
    # 2. –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏/–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏ VK –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if VK_ENABLED:
        vk_id = context.user_data.get("vk_id")
        if not vk_id:
            action_buttons.append([InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å VK –ø—Ä–æ—Ñ–∏–ª—å", callback_data="link_vk")])
        else:
            action_buttons.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å VK", callback_data="link_vk")])
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if user and user.id in get_admins(context):
        admin_row = []
        admin_row.append(InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="open_admin"))
        if len(all_posters) > 0:
            admin_row.append(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_poster:{current_poster_index}"))
        action_buttons.append(admin_row)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    all_buttons = nav_buttons + action_buttons
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞—Ñ–∏—à—É
    try:
        caption = poster.get("caption", "")
        if len(all_posters) > 1:
            caption += f"\n\nüìç –ê—Ñ–∏—à–∞ {current_poster_index + 1} –∏–∑ {len(all_posters)}"
        
        # –£–±–∏—Ä–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –±—ã–ª–∞
        keyboard_remove_msg = await update.effective_chat.send_message(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ñ–∏—à—É
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=poster["file_id"],
            caption=caption,
            reply_markup=InlineKeyboardMarkup(all_buttons)
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        try:
            await keyboard_remove_msg.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
    except Exception as e:
        logger.exception("Failed to send poster: %s", e)
        await update.effective_chat.send_message(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ñ–∏—à–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=None
        )


async def show_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user:
        await update.effective_chat.send_message(f"–í–∞—à ID: {user.id}")


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    try:
        await query.answer()
        user = query.from_user
        data = query.data
        
        logger.info("Button pressed by user %s: %s", user.id, data)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        await load_user_data_from_db(context, user.id)

        if data == "check_all":
            tg1_ok, tg2_ok = await is_user_subscribed(context, user.id)
            vk_id = context.user_data.get("vk_id")
            vk_status = None
            if VK_ENABLED and vk_id:
                vk_status = await is_user_subscribed_vk(vk_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            lines = ["üîç **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫:**\n"]
            
            # –ü–µ—Ä–≤—ã–π Telegram –∫–∞–Ω–∞–ª
            tg1_icon = "‚úÖ" if tg1_ok else "‚ùå"
            tg1_url = f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            lines.append(f"{tg1_icon} [Largent MSK]({tg1_url})")
            
            # –í—Ç–æ—Ä–æ–π Telegram –∫–∞–Ω–∞–ª
            tg2_icon = "‚úÖ" if tg2_ok else "‚ùå"
            tg2_url = f"https://t.me/{CHANNEL_USERNAME_2.lstrip('@')}"
            lines.append(f"{tg2_icon} [IDN Records]({tg2_url})")
            
            # VK —Å–æ —Å—Å—ã–ª–∫–æ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º
            if VK_ENABLED:
                if not vk_id:
                    lines.append(f"‚ö†Ô∏è [VK –≥—Ä—É–ø–ø–∞](https://vk.com/{VK_GROUP_DOMAIN}) - –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
                elif vk_status is None:
                    lines.append(f"‚ùì [VK –≥—Ä—É–ø–ø–∞](https://vk.com/{VK_GROUP_DOMAIN}) - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
                elif vk_status is True:
                    lines.append(f"‚úÖ [VK –≥—Ä—É–ø–ø–∞](https://vk.com/{VK_GROUP_DOMAIN})")
                elif vk_status is False:
                    lines.append(f"‚ùå [VK –≥—Ä—É–ø–ø–∞](https://vk.com/{VK_GROUP_DOMAIN}) - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å - –Ω—É–∂–Ω—ã –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
            all_tg_ok = tg1_ok and tg2_ok
            if all_tg_ok and (not VK_ENABLED or not vk_id or vk_status):
                lines.append("\nüéâ **–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!**")
            else:
                lines.append("\n‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è**")
            
            text = "\n".join(lines)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            btns = []
            
            # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω)
            if not tg1_ok:
                btns.append([InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Largent MSK", url=tg1_url)])
            if not tg2_ok:
                btns.append([InlineKeyboardButton("üéµ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ IDN Records", url=tg2_url)])
            
            # VK –ø—Ä–∏–≤—è–∑–∫–∞ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            if VK_ENABLED:
                if not vk_id:
                    btns.append([InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å VK –ø—Ä–æ—Ñ–∏–ª—å", callback_data="link_vk")])
                else:
                    btns.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å VK", callback_data="link_vk")])
            
            btns.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_all")])
            btns.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.message.delete()
            except Exception:
                pass
            await context.bot.send_message(
                chat_id=update.effective_chat.id, 
                text=text, 
                reply_markup=InlineKeyboardMarkup(btns), 
                parse_mode="Markdown"
            )

        elif data == "link_vk":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º VK ID –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
            logger.info("User %s clicked link_vk button", user.id)
            try:
                context.user_data["awaiting_vk"] = True
                kb = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π VK
                current_vk = context.user_data.get("vk_id")
                if current_vk:
                    text = (
                        "üîÑ –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ VK –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
                        f"–¢–µ–∫—É—â–∏–π VK ID: {current_vk}\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π ID –≤–∞—à–µ–≥–æ VK –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
                        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                        "‚Ä¢ –¶–∏—Ñ—Ä—ã: 123456789\n"
                        "‚Ä¢ ID: id123456789\n"
                        "‚Ä¢ –ù–∏–∫–Ω–µ–π–º: durov, ivan_petrov\n\n"
                        "–ö–∞–∫ –Ω–∞–π—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å VK\n"
                        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
                        "   ‚Ä¢ vk.com/durov ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: durov\n"
                        "   ‚Ä¢ vk.com/id123456789 ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: 123456789\n\n"
                        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                    )
                else:
                    text = (
                        "üîó –ü—Ä–∏–≤—è–∑–∫–∞ VK –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–≥–æ VK –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
                        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                        "‚Ä¢ –¶–∏—Ñ—Ä—ã: 123456789\n"
                        "‚Ä¢ ID: id123456789\n"
                        "‚Ä¢ –ù–∏–∫–Ω–µ–π–º: durov, ivan_petrov\n\n"
                        "–ö–∞–∫ –Ω–∞–π—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å VK\n"
                        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
                        "   ‚Ä¢ vk.com/durov ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: durov\n"
                        "   ‚Ä¢ vk.com/id123456789 ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: 123456789\n\n"
                        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞—Ñ–∏—à—É) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try:
                    await query.message.delete()
                except Exception:
                    pass
                
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(kb)
                )
                logger.info("Successfully showed VK link form to user %s", user.id)
            except Exception as e:
                logger.error("Failed to show VK link form to user %s: %s", user.id, e)
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –ø—Ä–∏–≤—è–∑–∫–∏ VK.\n\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
                )
        
        elif data == "show_current_poster":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∞—Ñ–∏—à—É (–ø–æ—Å–ª–µ–¥–Ω—é—é)
            all_posters = context.bot_data.get("all_posters", [])
            if all_posters:
                context.user_data["current_poster_index"] = len(all_posters) - 1
            # UX: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∞—Ñ–∏—à–∏
            try:
                await query.message.delete()
            except Exception:
                pass
            await show_main_menu(update, context)
        
        elif data == "poster":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∞—Ñ–∏—à—É (–ø–æ—Å–ª–µ–¥–Ω—é—é) - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            all_posters = context.bot_data.get("all_posters", [])
            if all_posters:
                context.user_data["current_poster_index"] = len(all_posters) - 1
            try:
                await query.message.delete()
            except Exception:
                pass
            await show_main_menu(update, context)
        
        elif data == "open_admin":
            # –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback
            await admin_panel(update, context)
        
        elif data == "back_to_menu":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
            await load_user_data_from_db(context, user.id)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∞—Ñ–∏—à–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –Ω–æ–≤—É—é)
            all_posters = context.bot_data.get("all_posters", [])
            if all_posters:
                context.user_data["current_poster_index"] = len(all_posters) - 1
            try:
                await query.message.delete()
            except Exception:
                pass
            await show_main_menu(update, context)
        
        elif data == "poster_prev":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞—Ñ–∏—à–µ
            all_posters = context.bot_data.get("all_posters", [])
            current_index = context.user_data.get("current_poster_index", len(all_posters) - 1 if all_posters else 0)
            if current_index > 0:
                context.user_data["current_poster_index"] = current_index - 1
            try:
                await query.message.delete()
            except Exception:
                pass
            await show_main_menu(update, context)
        
        elif data.startswith("delete_poster:"):
            try:
                poster_index = int(data.split(":", 1)[1])
                all_posters = context.bot_data.get("all_posters", [])
                
                if 0 <= poster_index < len(all_posters):
                    deleted_poster = all_posters.pop(poster_index)
                    context.bot_data["all_posters"] = all_posters
                    
                    # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–∞—è –∞—Ñ–∏—à–∞ –±—ã–ª–∞ —Ç–µ–∫—É—â–µ–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é
                    current_poster = context.bot_data.get("poster")
                    if current_poster == deleted_poster:
                        if all_posters:
                            context.bot_data["poster"] = all_posters[-1]
                        else:
                            context.bot_data.pop("poster", None)
                    
                    caption = deleted_poster.get("caption", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                    if len(caption) > 50:
                        caption = caption[:50] + "..."
                    
                    await query.edit_message_text(
                        f"‚úÖ –ê—Ñ–∏—à–∞ —É–¥–∞–ª–µ–Ω–∞: {caption}\n\n–û—Å—Ç–∞–ª–æ—Å—å –∞—Ñ–∏—à: {len(all_posters)}"
                    )
                else:
                    await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞—Ñ–∏—à–∏")
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ñ–∏—à–∏")
        
        elif data == "cancel_delete":
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif data == "poster_next":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ñ–∏—à–µ
            all_posters = context.bot_data.get("all_posters", [])
            current_index = context.user_data.get("current_poster_index", len(all_posters) - 1 if all_posters else 0)
            if current_index < len(all_posters) - 1:
                context.user_data["current_poster_index"] = current_index + 1
            try:
                await query.message.delete()
            except Exception:
                pass
            await show_main_menu(update, context)
        
        elif data.startswith("gender_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
            gender = data.split("_", 1)[1]
            context.user_data["gender"] = gender
            context.user_data["registration_step"] = "age"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ –ë–î
            pool = get_db_pool(context)
            if pool:
                try:
                    await upsert_user(pool, tg_id=user.id, gender=gender, username=user.username)
                    logger.info("Gender saved to DB for user %s: %s", user.id, gender)
                except Exception as e:
                    logger.warning("Failed to save gender to DB: %s", e)
            
            gender_text = {
                "male": "–º—É–∂—Å–∫–æ–π",
                "female": "–∂–µ–Ω—Å–∫–∏–π"
            }.get(gender, "")
            
            await query.edit_message_text(
                f"–ü–æ–ª: {gender_text} ‚úÖ\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 18"
            )
        
        elif data == "past_event":
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—à–µ–¥—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            await query.answer("–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ üìÖ")
        
        elif data.startswith("admin:"):
            sub = data.split(":", 1)[1]
            if user.id not in get_admins(context):
                await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                return
            
            if sub == "create_poster":
                # init draft
                ud = context.user_data
                ud["poster_draft"] = {"step": "photo", "file_id": None, "caption": None, "ticket_url": None}
                await query.edit_message_text(
                    "–®–∞–≥ 1/4: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∞—Ñ–∏—à–∏",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:back_to_panel")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_poster")],
                    ]),
                )
            
            elif sub == "broadcast_now":
                await do_weekly_broadcast(context)
                await query.edit_message_text("–ê—Ñ–∏—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º ‚úÖ")
            
            elif sub == "set_ticket":
                context.user_data["awaiting_ticket"] = True
                await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç¬ª")
            
            elif sub == "delete_poster":
                # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞—Ñ–∏—à—É
                current_poster = context.bot_data.pop("poster", None)
                if current_poster:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞—Ñ–∏—à
                    all_posters = context.bot_data.get("all_posters", [])
                    if current_poster in all_posters:
                        all_posters.remove(current_poster)
                        context.bot_data["all_posters"] = all_posters
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∞—Ñ–∏—à–∏, –¥–µ–ª–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–∫—É—â–µ–π
                    if all_posters:
                        context.bot_data["poster"] = all_posters[-1]
                        await query.edit_message_text(f"–ê—Ñ–∏—à–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ\n\n–û—Å—Ç–∞–ª–æ—Å—å –∞—Ñ–∏—à: {len(all_posters)}")
                    else:
                        await query.edit_message_text("–ê—Ñ–∏—à–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ\n\n–ê—Ñ–∏—à –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                else:
                    await query.edit_message_text("–ù–µ—Ç –∞—Ñ–∏—à–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚ùå")
            
            elif sub == "broadcast_text":
                context.user_data["awaiting_broadcast_text"] = True
                await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
            
            elif sub == "stats":
                count = len(get_known_users(context))
                await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
            
            elif sub == "back_to_panel":
                context.user_data.pop("poster_draft", None)
                await admin_panel(update, context)
            
            elif sub == "confirm_poster":
                draft = context.user_data.get("poster_draft") or {}
                # Validate poster before saving
                if not draft.get("file_id"):
                    await query.edit_message_text("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –∞—Ñ–∏—à–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                    return
                caption_ok = is_valid_caption(draft.get("caption") or "")
                link_ok = (not draft.get("ticket_url")) or is_valid_url(draft.get("ticket_url"))
                if not caption_ok:
                    await query.edit_message_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å. –ú–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞.")
                    return
                if not link_ok:
                    await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç—ã. –£–∫–∞–∂–∏—Ç–µ URL —Ñ–æ—Ä–º–∞—Ç–∞ https://...")
                    return
                
                poster = {"file_id": draft["file_id"], "caption": draft.get("caption") or "", "ticket_url": draft.get("ticket_url")}
                context.bot_data["poster"] = poster
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ñ–∏—à—É –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ñ–∏—à
                all_posters = context.bot_data.get("all_posters", [])
                all_posters.append(poster)
                context.bot_data["all_posters"] = all_posters
                
                context.user_data.pop("poster_draft", None)
                # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —á–∞—Ç –∞–¥–º–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ñ–æ—Ç–æ+—Ç–µ–∫—Å—Ç+–∫–Ω–æ–ø–∫–∞)
                rm = None
                if poster.get("ticket_url"):
                    rm = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=poster["ticket_url"])]])
                await context.bot.send_photo(
                    chat_id=query.message.chat_id, 
                    photo=poster["file_id"], 
                    caption=poster.get("caption", ""), 
                    reply_markup=rm
                )
                await query.edit_message_text(f"–ê—Ñ–∏—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ‚úÖ\n\n–í—Å–µ–≥–æ –∞—Ñ–∏—à: {len(all_posters)}")
            
            elif sub == "cancel_poster":
                context.user_data.pop("poster_draft", None)
                await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ñ–∏—à–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
            
            elif sub == "users_count":
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                pool = get_db_pool(context)
                if pool:
                    try:
                        stats = await get_user_stats(pool)
                        text = f"üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
                        text += f"‚Ä¢ –° –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º VK: {stats.get('users_with_vk', 0)}\n"
                        text += f"‚Ä¢ –ú—É–∂—á–∏–Ω: {stats.get('male_users', 0)}\n"
                        text += f"‚Ä¢ –ñ–µ–Ω—â–∏–Ω: {stats.get('female_users', 0)}\n"
                        text += f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_registrations', 0)}"
                    except Exception as e:
                        text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
                else:
                    text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–µ—à–µ: {len(get_known_users(context))}"
                
                kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]]
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="Markdown")
            
            elif sub == "list_posters":
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ñ–∏—à
                all_posters = context.bot_data.get("all_posters", [])
                if not all_posters:
                    text = "üìã –°–ø–∏—Å–æ–∫ –∞—Ñ–∏—à –ø—É—Å—Ç"
                else:
                    text = f"üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ñ–∏—à ({len(all_posters)}):**\n\n"
                    current_poster = context.bot_data.get("poster")
                    
                    for i, poster in enumerate(all_posters):
                        caption = poster.get("caption", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        if len(caption) > 40:
                            caption = caption[:40] + "..."
                        
                        status = "üü¢ –¢–ï–ö–£–©–ê–Ø" if poster == current_poster else "‚ö™"
                        ticket_status = "üé´" if poster.get("ticket_url") else "‚ùå"
                        
                        text += f"{i+1}. {status} {caption}\n   –ë–∏–ª–µ—Ç—ã: {ticket_status}\n\n"
                
                kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]]
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="Markdown")
            
            elif sub == "check_by_username":
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ username/ID –≤ —Ä–µ–∂–∏–º–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                context.user_data["awaiting_username_check"] = True
                context.user_data["continuous_check_mode"] = True
                kb = [[InlineKeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="admin:stop_check")]]
                await query.edit_message_text(
                    "üîç **–†–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username (—Å @) –∏–ª–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "‚Ä¢ Username: `@durov`\n"
                    "‚Ä¢ ID: `123456789`\n\n"
                    "üí° –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–∞–∑—É –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π username\n"
                    "–ù–∞–∂–º–∏—Ç–µ 'üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É' –¥–ª—è –≤—ã—Ö–æ–¥–∞",
                    reply_markup=InlineKeyboardMarkup(kb),
                    parse_mode="Markdown"
                )
            
            elif sub == "stop_check":
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                context.user_data["awaiting_username_check"] = False
                context.user_data["continuous_check_mode"] = False
                await query.edit_message_text(
                    "‚úÖ –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
                    "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...",
                    parse_mode="Markdown"
                )
                await asyncio.sleep(1)
                await admin_panel(update, context)
            
            elif sub == "refresh":
                # –û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                await admin_panel(update, context)
    
    except Exception as e:
        logger.exception("handle_buttons failed: %s", e)
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=False)
        except Exception:
            pass


async def send_poster_to_chat(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    all_posters = context.bot_data.get("all_posters", [])
    if not all_posters:
        await context.bot.send_message(chat_id, "–ê—Ñ–∏—à –ø–æ–∫–∞ –Ω–µ—Ç ;(")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –Ω–æ–≤—É—é) –∞—Ñ–∏—à—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    poster = all_posters[-1]
    file_id = poster.get("file_id")
    caption = poster.get("caption", "")
    ticket_url = poster.get("ticket_url")
    
    try:
        reply_markup = None
        if ticket_url:
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=ticket_url)]])
        await context.bot.send_photo(chat_id=chat_id, photo=file_id, caption=caption, reply_markup=reply_markup)
    except Forbidden:
        logger.info("Cannot send message to chat_id %s (blocked or privacy)", chat_id)
    except Exception as e:
        logger.exception("Failed to send poster to %s: %s", chat_id, e)


# ----------------------
# Admin commands
# ----------------------

async def admin_only(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user = update.effective_user
    return bool(user and (user.id in get_admins(context)))


async def save_poster(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_only(update, context):
        return
    msg = update.message
    if not msg:
        return
    # If command is a reply to a photo, use that; otherwise, try this message
    photo_msg = msg.reply_to_message if (msg.reply_to_message and msg.reply_to_message.photo) else msg
    if not photo_msg.photo:
        await msg.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∞—Ñ–∏—à–∏ –∏ –ø–æ–¥–ø–∏—Å—å—é.")
        return
    largest = photo_msg.photo[-1]
    file_id = largest.file_id
    caption = photo_msg.caption or ""
    poster = context.bot_data.get("poster", {})
    ticket_url = poster.get("ticket_url")
    context.bot_data["poster"] = {"file_id": file_id, "caption": caption, "ticket_url": ticket_url}
    await msg.reply_text("–ê—Ñ–∏—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ (—Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å). –î–ª—è —Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_ticket <url>")


async def set_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_only(update, context):
        return
    msg = update.message
    if not msg:
        return
    if not context.args:
        await msg.reply_text("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É: /set_ticket https://...")
        return
    url = context.args[0].strip()
    poster = context.bot_data.get("poster") or {}
    poster["ticket_url"] = url
    context.bot_data["poster"] = poster
    await msg.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")


async def delete_poster(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_only(update, context):
        return
    context.bot_data.pop("poster", None)
    await update.message.reply_text("–ê—Ñ–∏—à–∞ —É–¥–∞–ª–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—É—é —Å /save_poster")


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å inline –∫–Ω–æ–ø–∫–∞–º–∏."""
    user = update.effective_user
    admins = get_admins(context)
    if not admins and user:
        admins.add(user.id)
    if not user or user.id not in admins:
        await update.effective_chat.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    pool = get_db_pool(context)
    stats = {}
    if pool:
        try:
            stats = await get_user_stats(pool)
        except Exception as e:
            logger.warning("Failed to get stats: %s", e)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ñ–∏—à–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    all_posters = context.bot_data.get("all_posters", [])
    current_poster = context.bot_data.get("poster")
    
    status_text = "üõ† **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å TusaBot**\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ñ–∏—à
    status_text += "üìä **–ê—Ñ–∏—à–∏:**\n"
    status_text += f"‚Ä¢ –í—Å–µ–≥–æ –∞—Ñ–∏—à: {len(all_posters)}\n"
    if current_poster:
        status_text += "‚Ä¢ –¢–µ–∫—É—â–∞—è –∞—Ñ–∏—à–∞: ‚úÖ –µ—Å—Ç—å\n"
        if current_poster.get("ticket_url"):
            status_text += "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç—ã: ‚úÖ –µ—Å—Ç—å\n"
        else:
            status_text += "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç—ã: ‚ùå –Ω–µ—Ç\n"
    else:
        status_text += "‚Ä¢ –¢–µ–∫—É—â–∞—è –∞—Ñ–∏—à–∞: ‚ùå –Ω–µ—Ç\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    status_text += "\nüë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    if stats:
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}\n"
        status_text += f"‚Ä¢ –° VK: {stats.get('users_with_vk', 0)}\n"
        status_text += f"‚Ä¢ –ú—É–∂—á–∏–Ω: {stats.get('male_users', 0)}\n"
        status_text += f"‚Ä¢ –ñ–µ–Ω—â–∏–Ω: {stats.get('female_users', 0)}\n"
        status_text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('today_registrations', 0)}\n"
    else:
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ: {len(get_known_users(context))}\n"
    
    # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    admin_buttons = [
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ñ–∏—à–∞–º–∏
        [
            InlineKeyboardButton("üß© –°–æ–∑–¥–∞—Ç—å –∞—Ñ–∏—à—É", callback_data="admin:create_poster"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞—Ñ–∏—à", callback_data="admin:list_posters")
        ],
        [
            InlineKeyboardButton("üì§ –†–∞–∑–æ—Å–ª–∞—Ç—å –∞—Ñ–∏—à—É", callback_data="admin:broadcast_now"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞—Ñ–∏—à—É", callback_data="admin:delete_poster")
        ],
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        [
            InlineKeyboardButton("üîó –ó–∞–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="admin:set_ticket"),
            InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast_text")
        ],
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        [
            InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–∏–∫—É", callback_data="admin:check_by_username"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:refresh")
        ],
        [
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users_count")
        ],
        # –í—ã—Ö–æ–¥
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    await update.effective_chat.send_message(
        status_text, 
        reply_markup=InlineKeyboardMarkup(admin_buttons),
        parse_mode="Markdown"
    )


async def make_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: /make_admin <user_id> –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    if not user or user.id not in get_admins(context):
        await update.effective_chat.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    target_id = None
    if context.args and context.args[0].isdigit():
        target_id = int(context.args[0])
    elif update.message and update.message.reply_to_message and update.message.reply_to_message.from_user:
        target_id = update.message.reply_to_message.from_user.id
    if not target_id:
        await update.effective_chat.send_message("–£–∫–∞–∂–∏ ID: /make_admin <user_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    admins = get_admins(context)
    admins.add(target_id)
    await update.effective_chat.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ‚úÖ")


async def broadcast_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_only(update, context):
        return
    await do_weekly_broadcast(context)
    await update.message.reply_text("–†–∞–∑–æ—Å–ª–∞–ª —Ç–µ–∫—É—â—É—é –∞—Ñ–∏—à—É –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚úÖ")


async def broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_only(update, context):
        return
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast_text –≤–∞—à —Ç–µ–∫—Å—Ç")
        return
    text = update.message.text.partition(' ')[2]
    for uid in list(get_known_users(context)):
        try:
            await context.bot.send_message(uid, text)
        except Forbidden:
            logger.info("Cannot message user %s (blocked)", uid)
        except Exception as e:
            logger.warning("Broadcast text failed to %s: %s", uid, e)


# ----------------------
# Weekly jobs
# ----------------------

async def finalize_previous_week_and_reengage(context: ContextTypes.DEFAULT_TYPE) -> None:
    now = datetime.now(timezone.utc)
    prev_key = previous_week_key(now)

    for uid in list(get_known_users(context)):
        ud = context.application.user_data.setdefault(uid, {})
        attended_weeks: Set[str] = ud.get("attended_weeks", set())
        missed_in_row = int(ud.get("missed_in_row", 0))
        if prev_key in attended_weeks:
            ud["missed_in_row"] = 0
        else:
            missed_in_row += 1
            ud["missed_in_row"] = missed_in_row
            if missed_in_row > 2:
                try:
                    await context.bot.send_message(uid, REENGAGE_TEXT)
                except Forbidden:
                    logger.info("Cannot message user %s (blocked)", uid)
                except Exception as e:
                    logger.warning("Re-engage send failed to %s: %s", uid, e)
        context.application.user_data[uid] = ud


async def do_weekly_broadcast(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞—Ñ–∏—à–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ Telegram –∏ VK"""
    known_users = get_known_users(context)
    if not known_users:
        logger.info("No users to broadcast to")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞—Ñ–∏—à—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    all_posters = context.bot_data.get("all_posters", [])
    if not all_posters:
        logger.info("No posters to broadcast")
        return
    
    latest_poster = all_posters[-1]
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤ Telegram
    success_count = 0
    for user_id in known_users:
        try:
            await send_poster_to_chat(context, user_id)
            success_count += 1
        except Exception as e:
            logger.warning("Failed to send poster to user %s: %s", user_id, e)
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤ VK
    vk_success = False
    if VK_ENABLED and VK_TOKEN:
        try:
            vk_success = await broadcast_to_vk(latest_poster)
        except Exception as e:
            logger.warning("Failed to broadcast to VK: %s", e)
    
    logger.info("Weekly broadcast completed: %d/%d users (Telegram), VK: %s", 
                success_count, len(known_users), "‚úÖ" if vk_success else "‚ùå")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –æ—Ç—á–µ—Ç
    admin_id = ADMIN_USER_ID
    if admin_id:
        try:
            report = f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            report += f"Telegram: {success_count}/{len(known_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            report += f"VK: {'‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' if vk_success else '‚ùå –û—à–∏–±–∫–∞'}"
            await context.bot.send_message(admin_id, report)
        except Exception as e:
            logger.warning("Failed to send broadcast report to admin: %s", e)


async def weekly_job(context: CallbackContext) -> None:
    await do_weekly_broadcast(context)


def schedule_weekly(app: Application) -> None:
    job_queue = app.job_queue
    send_time_utc = time(hour=WEEKLY_HOUR_UTC, minute=WEEKLY_MINUTE, tzinfo=pytz.utc)
    job_queue.run_daily(weekly_job, time=send_time_utc, days=(WEEKLY_DAY,))
    logger.info(
        "Scheduled weekly broadcast: day=%s at %02d:%02d UTC (local %02d:%02d MSK)",
        WEEKLY_DAY,
        WEEKLY_HOUR_UTC,
        WEEKLY_MINUTE,
        WEEKLY_HOUR_LOCAL,
        WEEKLY_MINUTE,
    )


async def _notify_admin_start(_: CallbackContext) -> None:
    if ADMIN_USER_ID:
        try:
            await _.bot.send_message(ADMIN_USER_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
        except Exception:
            pass


# ----------------------
# Registration Handler
# ----------------------

async def handle_registration_step(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, user, user_data: dict, reg_step: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    pool = get_db_pool(context)
    
    if reg_step == "name":
        name = text.strip()
        user_data["name"] = name
        user_data["registration_step"] = "gender"
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î —Å –∏–º–µ–Ω–µ–º
        if pool:
            try:
                await upsert_user(pool, tg_id=user.id, name=name, username=user.username)
                logger.info("Name saved to DB for user %s: %s", user.id, name)
            except Exception as e:
                logger.warning("Failed to save name to DB: %s", e)
        
        kb = [
            [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ]
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return
    
    elif reg_step == "age":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
        try:
            age = int(text.strip())
            if age < 14 or age > 100:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 14 –¥–æ 100 –ª–µ—Ç\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
                )
                return
                
            user_data["age"] = age
            user_data["registered"] = True
            user_data.pop("registration_step", None)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - –±–µ—Ä–µ–º –∏–º—è –∏–∑ –ø–∞–º—è—Ç–∏, –∞ –µ—Å–ª–∏ –Ω–µ—Ç - –∏–∑ –ë–î
            name = user_data.get("name")
            if not name and pool:
                try:
                    async with pool.acquire() as conn:
                        row = await conn.fetchrow("SELECT name FROM users WHERE tg_id = $1", user.id)
                        if row and row['name']:
                            name = row['name']
                            user_data["name"] = name
                except Exception as e:
                    logger.warning("Failed to load name from DB: %s", e)
            
            if not name:
                name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            gender_text = {
                "male": "–º—É–∂—Å–∫–æ–π",
                "female": "–∂–µ–Ω—Å–∫–∏–π"
            }.get(user_data.get("gender", ""), "–Ω–µ —É–∫–∞–∑–∞–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            if pool:
                try:
                    await upsert_user(
                        pool,
                        tg_id=user.id,
                        name=name,
                        gender=user_data.get("gender"),
                        age=age,
                        vk_id=user_data.get("vk_id"),
                        username=user.username,
                    )
                    logger.info("Registration completed for user %s: %s", user.id, name)
                except Exception as e:
                    logger.warning("DB upsert after registration failed: %s", e)
            
            kb = [[InlineKeyboardButton("üéâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            await update.message.reply_text(
                f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                f"üìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                f"‚Ä¢ –ò–º—è: {name}\n"
                f"‚Ä¢ –ü–æ–ª: {gender_text}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å –Ω–∞—à–∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∏! ü•≥",
                reply_markup=InlineKeyboardMarkup(kb)
            )
            return
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 18"
            )
            return


# ----------------------
# Bootstrap
# ----------------------

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Registration flow
    if update.message and update.message.text:
        text = update.message.text
        user = update.effective_user
        user_data = context.user_data
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô!)
        reg_step = user_data.get("registration_step")
        if reg_step:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ
            await handle_registration_step(update, context, text, user, user_data, reg_step)
            return
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ username/ID (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if user_data.get("awaiting_username_check"):
            # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–¥–µ—Å—å! –û–Ω –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –ù–ï –≤ —Ä–µ–∂–∏–º–µ continuous
            
            input_text = text.strip()
            target_user_id = None
            username_display = input_text
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ username
                if input_text.isdigit():
                    # –≠—Ç–æ ID
                    target_user_id = int(input_text)
                    username_display = f"ID {input_text}"
                else:
                    # –≠—Ç–æ username - –∏—â–µ–º –≤ –ë–î
                    username = input_text.lstrip('@')
                    username_display = f"@{username}"
                    
                    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ username
                    pool = get_db_pool(context)
                    if pool:
                        try:
                            user_in_db = await get_user_by_username(pool, username)
                            if user_in_db:
                                target_user_id = user_in_db.get("tg_id")
                                logger.info(f"Found user by username @{username}: ID={target_user_id}")
                            else:
                                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ë–î, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ get_chat (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π)
                                try:
                                    target_chat = await context.bot.get_chat(f"@{username}")
                                    target_user_id = target_chat.id
                                    logger.info(f"Found user by get_chat @{username}: ID={target_user_id}")
                                except Exception:
                                    pass
                        except Exception as e:
                            logger.error(f"Error searching user by username in DB: {e}")
                    
                    if not target_user_id:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
                        if context.user_data.get("continuous_check_mode"):
                            kb = [[InlineKeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="admin:stop_check")]]
                            await update.message.reply_text(
                                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                f"‚Ä¢ Username —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ\n"
                                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º\n"
                                f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω\n\n"
                                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π username –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram ID",
                                reply_markup=InlineKeyboardMarkup(kb)
                            )
                            # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
                        else:
                            context.user_data["awaiting_username_check"] = False
                            await update.message.reply_text(
                                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                f"‚Ä¢ Username —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ\n"
                                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º\n"
                                f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω\n\n"
                                f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram ID\n"
                                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å @userinfobot",
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]])
                            )
                        return
                
                if not target_user_id:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]])
                    )
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–∞ TG –∫–∞–Ω–∞–ª–∞
                tg1_ok, tg2_ok = await is_user_subscribed(context, target_user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º VK (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞)
                pool = get_db_pool(context)
                vk_id = None
                vk_status = None
                if pool:
                    try:
                        user_in_db = await get_user(pool, target_user_id)
                        vk_id = user_in_db.get("vk_id") if user_in_db else None
                        if vk_id and VK_ENABLED:
                            vk_status = await is_user_subscribed_vk(vk_id)
                    except Exception:
                        pass
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown)
                def escape_markdown(text):
                    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
                    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                    for char in special_chars:
                        text = text.replace(char, '\\' + char)
                    return text
                
                username_safe = escape_markdown(str(username_display))
                
                report = f"üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è {username_safe}**\n\n"
                report += f"üë§ Telegram ID: `{target_user_id}`\n\n"
                report += "üì∫ **Telegram –∫–∞–Ω–∞–ª—ã:**\n"
                report += f"{'‚úÖ' if tg1_ok else '‚ùå'} {CHANNEL_USERNAME} \\(Largent MSK\\)\n"
                report += f"{'‚úÖ' if tg2_ok else '‚ùå'} {CHANNEL_USERNAME_2} \\(IDN Records\\)\n\n"
                
                if VK_ENABLED:
                    report += "üéµ **VK –≥—Ä—É–ø–ø–∞:**\n"
                    if not vk_id:
                        report += "‚ö†Ô∏è VK –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                    elif vk_status is None:
                        report += f"‚ùì VK ID: {vk_id} \\- –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å\n"
                    elif vk_status:
                        report += f"‚úÖ VK ID: {vk_id}\n"
                    else:
                        report += f"‚ùå VK ID: {vk_id} \\- –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω\n"
                
                all_ok = tg1_ok and tg2_ok and (not VK_ENABLED or vk_status)
                report += f"\n{'üéâ **–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã\\!**' if all_ok else '‚ö†Ô∏è **–ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã**'}"
                
                # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if context.user_data.get("continuous_check_mode"):
                    # –†–µ–∂–∏–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω—ã–º
                    kb = [[InlineKeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="admin:stop_check")]]
                    await update.message.reply_text(
                        report + "\n\nüí° –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π username –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É'",
                        reply_markup=InlineKeyboardMarkup(kb),
                        parse_mode="MarkdownV2"
                    )
                    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ awaiting_username_check!
                else:
                    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
                    context.user_data["awaiting_username_check"] = False
                    await update.message.reply_text(
                        report,
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]]),
                        parse_mode="MarkdownV2"
                    )
                return
                
            except Exception as e:
                logger.error("Error checking subscriptions by username: %s", e)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
                if context.user_data.get("continuous_check_mode"):
                    kb = [[InlineKeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="admin:stop_check")]]
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:\n{str(e)}\n\n"
                        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π username",
                        reply_markup=InlineKeyboardMarkup(kb)
                    )
                    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
                else:
                    context.user_data["awaiting_username_check"] = False
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:\n{str(e)}",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:refresh")]])
                    )
                return
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        # Handle admin text inputs
        if context.user_data.get("awaiting_ticket"):
            context.user_data["awaiting_ticket"] = False
            url = update.message.text.strip()
            poster = context.bot_data.get("poster") or {}
            poster["ticket_url"] = url
            context.bot_data["poster"] = poster
            await update.message.reply_text("–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
            return
            
        if context.user_data.get("awaiting_broadcast_text"):
            context.user_data["awaiting_broadcast_text"] = False
            text = update.message.text
            for uid in list(get_known_users(context)):
                try:
                    await context.bot.send_message(uid, text)
                except Forbidden:
                    logger.info("Cannot message user %s (blocked)", uid)
                except Exception as e:
                    logger.warning("Broadcast text failed to %s: %s", uid, e)
            await update.message.reply_text("–¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")
            return
        
        # Poster draft: expecting caption or link
        draft = context.user_data.get("poster_draft")
        if draft:
            step = draft.get("step")
            if step == "caption":
                draft["caption"] = update.message.text
                draft["step"] = "link"
                context.user_data["poster_draft"] = draft
                await update.message.reply_text(
                    "–®–∞–≥ 3/4: –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç¬ª",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_poster")],
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:back_to_panel")],
                    ]),
                )
                return
            if step == "link":
                url = update.message.text.strip()
                draft["ticket_url"] = url
                draft["step"] = "preview"
                context.user_data["poster_draft"] = draft
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
                rm = None
                if url:
                    rm = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=url)]])
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=draft["file_id"],
                    caption=draft.get("caption") or "",
                    reply_markup=rm,
                )
                await update.message.reply_text(
                    "–®–∞–≥ 4/4: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é?",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin:confirm_poster")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_poster")],
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:back_to_panel")],
                    ]),
                )
                return
        if VK_ENABLED and context.user_data.get("awaiting_vk"):
            context.user_data["awaiting_vk"] = False
            vk_input = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: —Ü–∏—Ñ—Ä—ã, id123456, –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º
            if not vk_input:
                kb = [[InlineKeyboardButton("üîó –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="link_vk")]]
                await update.message.reply_text(
                    "‚ùå **–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ**\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à VK ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º",
                    reply_markup=InlineKeyboardMarkup(kb),
                    parse_mode="Markdown"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK ID/–Ω–∏–∫–Ω–µ–π–º–∞
            is_valid = (
                vk_input.isdigit() or  # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã: 123456789
                (vk_input.lower().startswith('id') and vk_input[2:].isdigit()) or  # id123456789
                (len(vk_input) >= 3 and vk_input.replace('_', '').replace('.', '').isalnum())  # –Ω–∏–∫–Ω–µ–π–º: durov, ivan_petrov
            )
            
            if not is_valid:
                kb = [[InlineKeyboardButton("üîó –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="link_vk")]]
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK ID/–Ω–∏–∫–Ω–µ–π–º–∞**\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "‚Ä¢ **–¶–∏—Ñ—Ä—ã:** 123456789\n"
                    "‚Ä¢ **ID:** id123456789\n"
                    "‚Ä¢ **–ù–∏–∫–Ω–µ–π–º:** durov, ivan_petrov\n\n"
                    "üìç –ù–∞–π—Ç–∏ –º–æ–∂–Ω–æ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø—Ä–æ—Ñ–∏–ª—è VK",
                    reply_markup=InlineKeyboardMarkup(kb),
                    parse_mode="Markdown"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞
            was_relink = bool(context.user_data.get("vk_id"))
            
            vk_id = vk_input
            context.user_data["vk_id"] = vk_id
            
            # Persist VK link to database
            pool = get_db_pool(context)
            if pool:
                try:
                    await set_vk_id(pool, user.id, vk_id)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                    vk_cache = context.bot_data.get("user_vk_cache", {})
                    vk_cache[user.id] = vk_id
                    context.bot_data["user_vk_cache"] = vk_cache
                    logger.info("VK ID %s linked to user %s", vk_id, user.id)
                except Exception as e:
                    logger.warning("DB set_vk_id failed: %s", e)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏
            status = await is_user_subscribed_vk(vk_id)
            
            kb = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
            
            if status is None:
                action_text = "–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω" if was_relink else "–ø—Ä–∏–≤—è–∑–∞–Ω"
                await update.message.reply_text(
                    f"‚úÖ **VK –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ {action_text}!**",
                    reply_markup=InlineKeyboardMarkup(kb),
                    parse_mode="Markdown"
                )
            elif status:
                action_text = "–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω" if was_relink else "–ø—Ä–∏–≤—è–∑–∞–Ω"
                await update.message.reply_text(
                    f"‚úÖ **VK –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ {action_text}!**",
                    reply_markup=InlineKeyboardMarkup(kb),
                    parse_mode="Markdown"
                )
            else:
                action_text = "–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω" if was_relink else "–ø—Ä–∏–≤—è–∑–∞–Ω"
                await update.message.reply_text(
                    f"‚úÖ **VK –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ {action_text}!**",
                    reply_markup=InlineKeyboardMarkup(kb),
                    parse_mode="Markdown"
                )
            return


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Poster draft: expecting photo at step 'photo'
    draft = context.user_data.get("poster_draft")
    if draft and draft.get("step") == "photo" and update.message.photo:
        largest = update.message.photo[-1]
        draft["file_id"] = largest.file_id
        draft["step"] = "caption"
        context.user_data["poster_draft"] = draft
        await update.message.reply_text(
            "–®–∞–≥ 2/4: –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ø–æ–¥–ø–∏—Å—å) –¥–ª—è –∞—Ñ–∏—à–∏",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_poster")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data="admin:back_to_panel")],
            ]),
        )
        return
    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –≤–Ω–µ –º–∞—Å—Ç–µ—Ä–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º


def build_app() -> Application:
    """Build and configure the Application"""
    ensure_data_dir()
    persistence = PicklePersistence(filepath=str(PERSISTENCE_FILE))
    
    # Create request with timeout and proxy support
    request = None
    if PROXY_URL:
        from httpx import AsyncClient
        from telegram.request import HTTPXRequest
        client = AsyncClient(proxies=PROXY_URL, timeout=30.0)
        request = HTTPXRequest(http_client=client)
    
    app = ApplicationBuilder().token(BOT_TOKEN).persistence(persistence).request(request).build()

    # DB lifecycle
    async def _on_startup(app: Application):
        try:
            pool = await create_pool()
            await init_schema(pool)
            app.bot_data["db_pool"] = pool
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
            user_ids = await get_all_user_ids(pool)
            app.bot_data["known_users"] = set(user_ids)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º VK –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            vk_data = await load_user_vk_data(pool)
            app.bot_data["user_vk_cache"] = vk_data
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            commands = [
                BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
                BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
            await app.bot.set_my_commands(commands)
            
            logger.info("DB pool initialized, schema ready, loaded %d users, commands set", len(user_ids))
        except Exception as e:
            logger.error("Failed to init DB: %s", e)

    async def _on_shutdown(app: Application):
        pool = app.bot_data.get("db_pool")
        if pool:
            try:
                await pool.close()
                logger.info("DB pool closed")
            except Exception as e:
                logger.warning("Error closing DB pool: %s", e)

    async def _notify_admin_start(context: ContextTypes.DEFAULT_TYPE):
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —É–±—Ä–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        pass

    # Register handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CommandHandler("id", show_id))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # Register lifecycle handlers - —É–¥–∞–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π handler
    app.post_init = _on_startup
    app.post_shutdown = _on_shutdown

    schedule_weekly(app)
    # Notify admin shortly after start
    app.job_queue.run_once(_notify_admin_start, when=1)
    return app


def main() -> None:
    app = build_app()
    logger.info("Bot starting...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
