#!/usr/bin/env python3
"""–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö TusaBot"""

import asyncio
import os
import pickle
from pathlib import Path
from dotenv import load_dotenv
from db import create_pool, get_all_user_ids, get_user

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
    try:
        pool = await create_pool()
        user_ids = await get_all_user_ids(pool)
        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {len(user_ids)}")
        
        if user_ids:
            print("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î:")
            for user_id in user_ids[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                user_data = await get_user(pool, user_id)
                print(f"  - {user_id}: {user_data}")
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è")
            
        await pool.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

def check_persistence_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª persistence"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª persistence...")
    
    persistence_paths = [
        Path("data/bot_data.pkl"),
        Path("bot_data.pickle"),
        Path("bot_data.pkl")
    ]
    
    for path in persistence_paths:
        if path.exists():
            print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {path}")
            try:
                with open(path, 'rb') as f:
                    data = pickle.load(f)
                    
                print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(data))} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"üîë –ö–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if 'known_users' in data:
                    known_users = data['known_users']
                    print(f"üë• –ò–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(known_users)}")
                    if known_users:
                        print(f"  –°–ø–∏—Å–æ–∫: {list(known_users)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_data
                if 'user_data' in data:
                    user_data = data['user_data']
                    print(f"üìù –î–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}")
                    for user_id, udata in list(user_data.items())[:3]:
                        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:")
                        for key, value in udata.items():
                            print(f"    {key}: {value}")
                        print()
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

def check_env():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    db_settings = {
        'DB_HOST': os.getenv('DB_HOST', '127.0.0.1'),
        'DB_PORT': os.getenv('DB_PORT', '5432'),
        'DB_NAME': os.getenv('DB_NAME', 'largent'),
        'DB_USER': os.getenv('DB_USER', 'postgres'),
        'DB_PASSWORD': os.getenv('DB_PASSWORD', '1')
    }
    
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î:")
    for key, value in db_settings.items():
        if key == 'DB_PASSWORD':
            print(f"  {key}: {'*' * len(value)}")
        else:
            print(f"  {key}: {value}")

async def main():
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö TusaBot\n")
    
    check_env()
    check_persistence_file()
    await check_database()
    
    print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—É—Å—Ç–æ–π –ë–î:")
    print("1. –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª–µ persistence")
    print("2. –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î (–æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)")
    print("3. –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –¥—Ä—É–≥–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("4. –°—Ö–µ–º–∞ –ë–î –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥—É")

if __name__ == "__main__":
    asyncio.run(main())
